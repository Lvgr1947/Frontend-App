name: Frontend CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
    - '.github/workflows/**'
  workflow_dispatch:

env:
  IMAGE_NAME: lvgr1947/frontend-app
  
jobs:
  # validate-yaml:
#     name: Lint & Validate K8s YAML
#     runs-on: self-hosted

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Install kubeconform
#         run: |
#           curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz
#           sudo mv kubeconform /usr/local/bin/

#       - name: Validate all K8s YAMLs
#         run: kubeconform -strict -summary -output json -ignore-missing-schemas -verbose k8s/


#   lint:
#     name: Lint HTML Files
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: app/frontend

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Install tidy
#         run: sudo apt-get update && sudo apt-get install -y tidy

#       - name: Run HTML Linter
#         run: |
#           echo "Linting staging/index.html"
#           tidy -qe staging/index.html
          
#           echo "Linting production/index.html"
#           tidy -qe production/index.html

          
#   build:
#     name: Build & Push Docker Image
#     runs-on: ubuntu-latest
#     #needs: validate-yaml
#     strategy:
#       matrix:
#         environment: [staging, production]
  
#     steps:
#       - uses: actions/checkout@v3
#       - name: Docker Login
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      
#       - name: Build Docker Image
#         run: |
#           docker build \
#             --build-arg ENV=${{ matrix.environment }} \
#             -t lvgr1947/frontend-app:${{ matrix.environment }} \
#             app/frontend
#         #working-directory: app/frontend
        

#       - name: Push Docker Image
#         run: docker push lvgr1947/frontend-app:${{ matrix.environment }}

        
  deploy_staging:
    name:  Deploy to Staging
    runs-on: self-hosted
    #needs: ["build","lint"]
    environment: staging
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Staging via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            rm -rf Frontend-App || true
            git clone https://github.com/${{ github.repository }}.git
            cd Frontend-App
            kubectl apply -f k8s/staging/
            kubectl apply -f k8s/monitoring/
            
  integration_tests:
    name: ðŸ”¬ Integration & E2E Tests on Staging
    runs-on: ubuntu-latest
    needs: deploy_staging

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Health Checks on Staging App
        run: |
          chmod +x scripts/test_endpoints.sh
          ./scripts/test_endpoints.sh ${{ secrets.STAGING_APP_URL }}



  deploy_production:
    name: Deploy to Production
    runs-on: self-hosted
    #needs: build
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        run: |
          echo "Getting API_KEY from SSM..."
          VALUE=$(aws ssm get-parameter --name "/frontend/API_KEY" --with-decryption --region ap-south-1 --query "Parameter.Value" --output text)
          echo "API_KEY=$VALUE" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          
      - name: Decode kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.0'
          
      - name: Deploy Production Manifests
        run: |
          kubectl apply -f k8s/production/
        env:
          KUBECONFIG: kubeconfig
