name: Frontend CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
    - '.github/workflows/**'
  workflow_dispatch:

env:
  IMAGE_NAME: lvgr1947/frontend-app
  
jobs:
  # validate-yaml:
#     name: Lint & Validate K8s YAML
#     runs-on: self-hosted

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Install kubeconform
#         run: |
#           curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz
#           sudo mv kubeconform /usr/local/bin/

#       - name: Validate all K8s YAMLs
#         run: kubeconform -strict -summary -output json -ignore-missing-schemas -verbose k8s/

  # build:
#     name: Build & Push Docker Image
#     runs-on: ubuntu-latest
#     #needs: validate-yaml
  
#     steps:
#       - uses: actions/checkout@v3
#       - name: Docker Login
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      
#       - name: Build Docker Image
#         run: docker build -t $IMAGE_NAME:latest ./app/frontend
#         #working-directory: app/frontend
        

#       - name: Push Docker Image
#         run: docker push $IMAGE_NAME:latest

        
  deploy_staging:
    name:  Deploy to Staging
    runs-on: self-hosted
    #needs: build
    environment: staging
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Staging via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            rm -rf Frontend-App || true
            git clone https://github.com/${{ github.repository }}.git
            cd Frontend-App
            kubectl apply -f k8s/staging/
            

  # deploy_production:
#     name: Deploy to Production
#     runs-on: self-hosted
#     #needs: build
#     environment: production
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         run: |
#           echo "Getting API_KEY from SSM..."
#           VALUE=$(aws ssm get-parameter --name "/frontend/API_KEY" --with-decryption --region ap-south-1 --query "Parameter.Value" --output text)
#           echo "API_KEY=$VALUE" >> $GITHUB_ENV
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          
#       - name: Decode kubeconfig
#         run: |
#           echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > kubeconfig
#           chmod 600 kubeconfig

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: 'v1.29.0'

#       - name: Deploy Production Manifests
#         run: |
#           kubectl apply -f k8s/production/
#         env:
#           KUBECONFIG: kubeconfig
  setup_monitoring:
    name: Install Monitoring via SSH
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Deploy Monitoring via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "[INFO] Installing monitoring stack on K3s node..."

            if ! command -v helm &>/dev/null; then
              echo "[INFO] Helm not found. Installing..."
              curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            else
              echo "[INFO] Helm already installed."
            fi
            
            # 2. Add Prometheus Helm repo and update
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
            helm repo update

            # 3. Install Prometheus + Grafana if not already installed
            if helm status prometheus -n monitoring >/dev/null 2>&1; then
              echo "[INFO] Prometheus stack already installed in 'monitoring' namespace."
            else
              echo "[INFO] Installing Prometheus stack..."
              helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
                --namespace monitoring --create-namespace \
                --version 56.6.0 \
                --wait
            fi

            # 4. Apply ingress from the repo
            echo "[INFO] Applying monitoring ingress..."
            rm -rf Frontend-App || true
            git clone https://github.com/${{ github.repository }}.git
            cd Frontend-App
            kubectl apply -f k8s/monitoring/
